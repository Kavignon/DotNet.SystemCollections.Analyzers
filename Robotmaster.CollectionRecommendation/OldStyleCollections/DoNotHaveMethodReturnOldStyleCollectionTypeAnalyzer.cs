using System;
using System.Collections.Immutable;
using System.Globalization;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Diagnostics;
using Robotmaster.CollectionRecommendation.Helpers;
using Robotmaster.CollectionRecommendation.Helpers.Collections;

namespace Robotmaster.CollectionRecommendation.OldStyleCollections
{
    /// <summary>
    ///     This is used to analyze and detect for situations where methods are returning "Old-Style" collections (i.e. collections from System.Collections).
    /// </summary>
    [DiagnosticAnalyzer(LanguageNames.CSharp)]
    public class DoNotHaveMethodReturnOldStyleCollectionTypeAnalyzer : DiagnosticAnalyzer
    {
        /// <summary>
        ///     This is the complete diagnostic ID for this analyzer.
        /// </summary>
        public static readonly string DiagnosticId = AnalyzerHelper.GetCompleteAnalyzerId(IdNumber);

        /// <summary>
        ///     The message format to use for diagnostics generated by this analyzer.
        /// </summary>
        internal const string MessageFormat = "The {0} method has a return type ({1}) of an \"Old-Style\" collection (i.e. collection class from System.Collections).";

        /// <summary>
        ///     The description to use for diagnostics generated by this analyzer.
        /// </summary>
        private const string Description = "This is when a field is an \"Old-Style\" collection (i.e. a collection class from System.Collections).";

        /// <summary>
        ///     The category to use for diagnostics generated by this analyzer.
        /// </summary>
        private const string Category = "Old-Style Collections";

        /// <summary>
        ///     The number portion of the analyzer's <see cref="DiagnosticId"/>.
        /// </summary>
        private const int IdNumber = 13;

#pragma warning disable RS1017 // DiagnosticId for analyzers must be a non-null constant.
        private static readonly DiagnosticDescriptor Rule = new DiagnosticDescriptor(DiagnosticId, AnalyzerHelper.AnalyzerTitle, MessageFormat, Category, DiagnosticSeverity.Warning, isEnabledByDefault: true, description: Description);
#pragma warning restore RS1017 // DiagnosticId for analyzers must be a non-null constant.

        public override ImmutableArray<DiagnosticDescriptor> SupportedDiagnostics => ImmutableArray.Create(Rule);

        public override void Initialize(AnalysisContext context)
        {
            context.ConfigureGeneratedCodeAnalysis(GeneratedCodeAnalysisFlags.Analyze | GeneratedCodeAnalysisFlags.ReportDiagnostics);
            context.EnableConcurrentExecution();
            context.RegisterSymbolAction(AnalyzeSymbol, SymbolKind.Method);
        }

        private static void AnalyzeSymbol(SymbolAnalysisContext context)
        {
            // Cast down to a IMethodSymbol.
            var methodSymbol = (IMethodSymbol)context.Symbol;

            // If the method returns void.
            if (methodSymbol.ReturnsVoid)
            {
                // Nothing more needs to be done here; just return null.
                return;
            }

            // If the method starts with the special prefix reserved for property getters.
            if (methodSymbol.Name.StartsWith(CollectionHelper.PropertyGetterPrefix, StringComparison.Ordinal))
            {
                // This is a getter.

                // Any diagnostic will be raised by another analyzer to avoid duplication.
                return;
            }

            // Attempt to get the named type symbol associated with the return type of that method.
            INamedTypeSymbol methodReturnTypeSymbol = AnalyzerHelper.GetNamedTypeSymbol(methodSymbol.ReturnType);

            // If it was not possible to get the named type symbol.
            if (methodReturnTypeSymbol == null)
            {
                // Nothing more needs to be done here; just return.
                return;
            }

            // If the method's return type is an old-style Collection class (i.e. class from System.Collections).
            if (CollectionHelper.IsOldStyleCollectionClass(methodReturnTypeSymbol))
            {
                // For every location where the method is defined.
                foreach (var location in methodSymbol.Locations)
                {
                    // Report a diagnostic that "Old-Style" collections should not be used anymore.
                    context.ReportDiagnostic(Diagnostic.Create(Rule, location, methodSymbol.Name, methodReturnTypeSymbol.GetFullNameWithoutPrefix()));
                }
            }
        }
    }
}
